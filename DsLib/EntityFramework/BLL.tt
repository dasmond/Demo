<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="$(ProjectDir)/T4/MSSQLHelper.ttinclude"  #>
<#@ include file="$(ProjectDir)/T4/MultipleOutputHelper.ttinclude"  #>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>

<# manager.StartHeader(); #>
//------------------------------------------------------------------------------
//  ！！！ 数据库表必须有说明信息才能自动生成 ！！！
//	此代码由T4模板自动生成 
//	生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#> By XiaoKe
//	对此文件的更改可能会导致不正确的行为，并且如果重新生成代码，这些更改将会丢失。
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Text; 

namespace <#=Config.EFNameSpace#>
{
<#
	manager.EndBlock(); //--- manager.StartHeader(); 

	List<DbInfo> tl = DbHelper.GetClassInfos();
	foreach (var t in tl)
    {
		//   表名称：t.TableName 
		//   表说明：t.TableDesc
		//   实体类：t.ModelName
		//   业务类：t.BllName 
		//   控制类：t.CtrName
        // 主键名称：t.KeyName
		// 主键类型：t.KeyType
		//   列信息：t.Columns
			//    列类型：t.Columns[i].ColumnType
			//    列名称：t.Columns[i].ColumnName 
			//    列说明：t.Columns[i].Remark 
			//  是否主键：t.Columns[i].IsPrimaryKey 
			//  是否自增：t.Columns[i].IsIdentity 
			//是否允许空：t.Columns[i].IsNullable
			//    小数位：t.Columns[i].Scale 
			//  字符长度：t.Columns[i].CharLength 
			//  字节长度：t.Columns[i].ByteLength
					
	manager.StartNewFile(t.BllName+".cs");
#>
    /// <summary>
    /// <#=t.TableDesc#>
    /// </summary>
    public partial class <#=t.BllName#>
    {
        private static readonly Repository<<#=t.ModelName#>> db = new Repository<<#=t.ModelName#>>();
				
        /// <summary>
        /// 查询存在
        /// </summary>
        /// <param name="<#=t.KeyName#>">主键ID</param>
        /// <returns></returns>
        public static bool Exists(<#=t.KeyType#> <#=t.KeyName#>)
        {
            return db.Exists(<#=t.KeyName#>);
        }

        /// <summary>
        /// 查询最大值，只用于（int long double decimal）等数字类型的查询，失败返回:-1
        /// </summary>
        /// <param name="field">字段名称</param>
        /// <returns></returns>
        public static string Max(string field)
        {
            return db.Max(field);
        }

        /// <summary>
        /// 查询行数，可用于查询存在，未找到字段名称返回:-1
        /// </summary>
        /// <param name="field">字段名称</param>
        /// <param name="keywords">关键字</param>
        /// <returns></returns>
        public static int Count(string field, string keywords)
        {
            return db.Count(field, keywords);
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public static int Add(<#=t.ModelName#> model)
        {
            return db.Add(model);
            //return _m.Id;
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <param name="models"></param>
        /// <returns></returns>
        public static int AddList(List<<#=t.ModelName#>> models)
        {
            return db.AddList(models);            
        }

        /// <summary>
        /// 更新
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public static int Update(<#=t.ModelName#> model)
        {
            return db.Update(model);
        }
		
        /// <summary>
        /// 更新多个
        /// </summary>
        /// <param name="models"></param>
        /// <returns></returns>
        public static int UpdateList(List<<#=t.ModelName#>> models)
        {
            return db.UpdateList(models);
        }

        //----------------------------------------------------

        /// <summary>
        /// 删除：删除一个实体
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public static int Delete(<#=t.ModelName#> model)
        {
            return db.Delete(model);
        }

        /// <summary>
        /// 删除：按条件删除
        /// </summary>
        /// <param name="where"></param>
        /// <returns></returns>
        public static int Delete(Expression<Func<<#=t.ModelName#>, bool>> where)
        {
            return db.Delete(where);
        }

        //----------------------------------------------------

        /// <summary>
        /// 获取：按主键获取一个实体
        /// </summary>
        /// <param name="<#=t.KeyName#>">主键值</param>
        /// <returns></returns>
        public static <#=t.ModelName#> GetModel(<#=t.KeyType#> <#=t.KeyName#>)
        {
            return db.GetModel(<#=t.KeyName#>);
        }

        /// <summary>
        /// 获取：按条件获取一个实体
        /// </summary>
        /// <param name="where"></param>
        /// <returns></returns>
        public static <#=t.ModelName#> GetModel(Expression<Func<<#=t.ModelName#>, bool>> where)
        {
            return db.GetModel(where);
        }
		
        /// <summary>
        /// 列表：按分页获取
        /// </summary>
        /// <param name="rows">每页条目数</param>
        /// <param name="pagenum">当前页码</param>
        /// <param name="field">排序字段（分隔符',',可附带排序类型）</param>
        /// <param name="sort">排序类型（ASC,DESC）</param>
        /// <param name="records">总记录数</param>
        /// <param name="total">总页码</param>
        /// <returns></returns>
        public static List<<#=t.ModelName#>> GetList(int rows, int pagenum, string field, string sort, out int records, out int total)
        {
            return db.GetList(rows, pagenum, field, sort, out records, out total);
        }

        /// <summary>
        /// 列表：按分页获取
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <param name="rows">每页条目数</param>
        /// <param name="pagenum">当前页码</param>
        /// <param name="field">排序字段（分隔符',',可附带排序类型）</param>
        /// <param name="sort">排序类型（ASC,默认：DESC）</param>
        /// <param name="records">总记录数</param>
        /// <param name="total">总页码</param>
        /// <returns></returns>
        public static List<<#=t.ModelName#>> GetList(Expression<Func<<#=t.ModelName#>, bool>> where, int rows, int pagenum, string field, string sort, out int records, out int total)
        {
            return db.GetList(where, rows, pagenum, field, sort, out records, out total);
        }



        //----------------------------------------------------

        /// <summary>
        /// 查询：IQueryable只存贮条件，不立即运行，实现延迟加载。
        /// </summary>
        /// <returns></returns>
        public static IQueryable<<#=t.ModelName#>> IQueryable()
        {
            return db.IQueryable();
        }

        /// <summary>
        /// 查询：按条件查询
        /// </summary>
        /// <param name="where"></param>
        /// <returns></returns>
        public static IQueryable<<#=t.ModelName#>> IQueryable(Expression<Func<<#=t.ModelName#>, bool>> where)
        {
            return db.IQueryable(where);
        }

        /// <summary>
        /// 列表：使用SQL语句获取列表
        /// </summary>
        /// <param name="sql">SQL语句</param>
        /// <returns></returns>
        public static List<<#=t.ModelName#>> GetList(string sql)
        {
            return db.GetList(sql);
        }

        /// <summary>
        /// 列表：使用SQL语句和SQL参数获取列表
        /// </summary>
        /// <param name="sql"></param>
        /// <param name="param"></param>
        /// <returns></returns>
        public static List<<#=t.ModelName#>> GetList(string sql, DbParameter[] param)
        {
            return db.GetList(sql, param);
        }

        //----------------------------------------------------





    }
<#
	manager.EndBlock(); //--- manager.StartNewFile(table.TableName+".cs");
	}
#>


<# manager.StartFooter(); #> 
}
<# manager.EndBlock(); //--- manager.StartFooter();#>
<# manager.Process(true); #>
