<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.DataSetExtensions" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data.DataSetExtensions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>

<#+
    /// <summary>
    /// 模板生成数据库连接信息
    /// </summary>
    public class Config
    {
        public static readonly string ConnectionString = "Data Source=(local);Initial Catalog=GPSDB;User ID=sa;Password=123123;";
        public static readonly string DbDatabase = "GPSDB";
        public static readonly string EFNameSpace = "DsLib.EntityFramework"; //EF 命名空间
        public static readonly string CTNameSpace = "WebApi.Controller";		//WebApi 控制器命名空间
        public static readonly string CMNameSpace = "DsLib.Common";			//通用类 命名空间
    }
	
    //工具类
    #region - Utils -
    /// <summary>
    /// 工具类
    /// </summary>
    public class Utils
    {
        static System.Data.Entity.Design.PluralizationServices.PluralizationService service = System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService(new CultureInfo("en-US"));

        /// <summary>
        /// 转单数
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static string ToSingularize(string value)
        {
            return service.Singularize(value);
        }

        /// <summary>
        /// 转复数
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static string ToPluralize(string value)
        {
            return service.Pluralize(value);
        }
    }
    #endregion



    /// <summary>
    /// 表字段结构
    /// </summary>
    public sealed class DbColumn
    {
        /// <summary>
        /// 字段ID
        /// </summary>
        public int ColumnID { get; set; }

        /// <summary>
        /// 是否主键
        /// </summary>
        public bool IsPrimaryKey { get; set; }

        /// <summary>
        /// 字段名称
        /// </summary>
        public string ColumnName { get; set; }

        /// <summary>
        /// 字段类型
        /// </summary>
        public string ColumnType { get; set; }

        /// <summary>
        /// 数据库类型对应的C#类型名称
        /// </summary>
        public string CSharpType
        {
            get
            {
                return SqlServerDbTypeMap.MapCSharpName(ColumnType);
            }
        }

        /// <summary>
        /// 数据库类型对应的C#类型
        /// </summary>
        public Type CommonType
        {
            get
            {
                return SqlServerDbTypeMap.MapCSharpType(ColumnType);
            }
        }

        /// <summary>
        /// 字节长度 
        /// </summary>
        public int ByteLength { get; set; }

        /// <summary>
        /// 字符长度
        /// </summary>
        public int CharLength { get; set; }

        /// <summary>
        /// 小数位
        /// </summary>
        public int Scale { get; set; }

        /// <summary>
        /// 是否自增列
        /// </summary>
        public bool IsIdentity { get; set; }

        /// <summary>
        /// 是否允许空
        /// </summary>
        public bool IsNullable { get; set; }

        /// <summary>
        /// 描述
        /// </summary>
        public string Remark { get; set; }
    }



    /// <summary>
    /// 类信息
    /// </summary>
    public sealed class DbInfo
    {

        /// <summary>
        /// 类名：实体类 
        /// </summary>
        public string ModelName { get; set; }
        /// <summary>
        /// 类名：实体类(泛型)
        /// </summary>
        public string ModelNames { get; set; }
        /// <summary>
        /// 类名：业务类
        /// </summary>
        public string BllName { get; set; }
        /// <summary>
        /// 类名：控制器
        /// </summary>
        public string CtrName { get; set; }

        /// <summary>
        /// 主键类型
        /// </summary>
        public string KeyType { get; set; }
        /// <summary>
        /// 主键名称
        /// </summary>
        public string KeyName { get; set; }

        /// <summary>
        /// 表名称
        /// </summary>
        public string TableName { get; set; }
        /// <summary>
        /// 表说明
        /// </summary>
        public string TableDesc { get; set; }
        /// <summary>
        /// 表的架构
        /// </summary>
        public string SchemaName { get; set; }

        /// <summary>
        /// 列信息
        /// </summary>
        public List<DbColumn> Columns { get; set; }

    }



    /// <summary>
    /// 表结构
    /// </summary>
    public sealed class DbTable
    {
        /// <summary>
        /// 表名称
        /// </summary>
        public string TableName { get; set; }
        /// <summary>
        /// 表说明
        /// </summary>
        public string TableDesc { get; set; }
        /// <summary>
        /// 表的架构
        /// </summary>
        public string SchemaName { get; set; }
        /// <summary>
        /// 表的记录数
        /// </summary>
        public int Rows { get; set; }

        /// <summary>
        /// 是否含有主键
        /// </summary>
        public bool HasPrimaryKey { get; set; }
    }



    /// <summary>
    /// 帮助类
    /// </summary>
    public class DbHelper
    {
        //获取类信息列表
        #region GetClassInfos
        /// <summary>
        /// 获取类信息列表
        /// </summary> 
        /// <returns></returns>
        public static List<DbInfo> GetClassInfos()
        {
            List<DbInfo> cl = new List<DbInfo>();

            List<DbTable> tbs = GetDbTables(Config.ConnectionString, Config.DbDatabase);
            foreach (DbTable tb in tbs)
            {
                DbInfo c = new DbInfo();
                c.TableName = tb.TableName; //表名称
                c.TableDesc = tb.TableDesc; //表说明
                c.SchemaName = tb.SchemaName;//

                c.ModelName = tb.TableName + "Info";    //实体类名称
                c.ModelNames = tb.TableName + "Infos";  //实体类名称（泛型）
                c.BllName = Utils.ToPluralize(tb.TableName);//业务类名称 复数
                c.CtrName = tb.TableName + "Controller";    //控制类名称

                c.Columns = GetDbColumns(Config.ConnectionString, Config.DbDatabase, c.TableName);

                DbColumn key = c.Columns.FirstOrDefault(f => f.IsPrimaryKey);
                if (key != null)
                {
                    c.KeyName = key.ColumnName; //主键字段名称
                    c.KeyType = key.CSharpType; //主键字段类型（C#类型）
                }

                cl.Add(c);
            }

            return cl;
        }
        #endregion



        //获取数据表列表
        #region GetDbTables
        /// <summary>
        /// 获取数据表列表
        /// </summary>
        /// <param name="connectionString"></param>
        /// <param name="database"></param>
        /// <param name="tables"></param>
        /// <returns></returns>
        public static List<DbTable> GetDbTables(string connectionString, string database, string tables = null)
        {

            if (!string.IsNullOrEmpty(tables))
            {
                tables = string.Format(" and obj.name in ('{0}')", tables.Replace(",", "','"));
            }
            #region SQL
            string sql = string.Format(@"SELECT
									obj.name tablename,
									isnull(ppt.[value],'') tabledesc, 
									schem.name schemname,
									idx.rows,
									CAST
									(
										CASE 
											WHEN (SELECT COUNT(1) FROM sys.indexes WHERE object_id= obj.OBJECT_ID AND is_primary_key=1) >=1 THEN 1
											ELSE 0
										END 
									AS BIT) HasPrimaryKey                                         
									from {0}.sys.objects obj 
									INNER JOIN {0}.dbo.sysindexes idx ON obj.object_id=idx.id and idx.indid<=1
									INNER JOIN {0}.sys.schemas schem ON obj.schema_id=schem.schema_id
									INNER JOIN {0}.sys.extended_properties ppt ON ppt.major_id= obj.object_id and ppt.minor_id=0 and ppt.class=1
									where type='U' and obj.name <> 'sysdiagrams' {1}
									order by obj.name", database, tables);
            #endregion
            DataTable dt = GetDataTable(connectionString, sql);
            return dt.Rows.Cast<DataRow>().Select(row => new DbTable
            {
                TableName = row.Field<string>("tablename"),
                TableDesc = row.Field<string>("tabledesc"),
                SchemaName = row.Field<string>("schemname"),
                Rows = row.Field<int>("rows"),
                HasPrimaryKey = row.Field<bool>("HasPrimaryKey")
            }).ToList();
        }
        #endregion

        //获取字段列表
        #region GetDbColumns
        /// <summary>
        /// 获取字段列表
        /// </summary>
        /// <param name="connectionString"></param>
        /// <param name="database"></param>
        /// <param name="tableName"></param>
        /// <param name="schema"></param>
        /// <returns></returns>
        public static List<DbColumn> GetDbColumns(string connectionString, string database, string tableName, string schema = "dbo")
        {
            #region SQL
            string sql = string.Format(@"
                                    WITH indexCTE AS
                                    (
	                                    SELECT 
                                        ic.column_id,
                                        ic.index_column_id,
                                        ic.object_id    
                                        FROM {0}.sys.indexes idx
                                        INNER JOIN {0}.sys.index_columns ic ON idx.index_id = ic.index_id AND idx.object_id = ic.object_id
                                        WHERE  idx.object_id =OBJECT_ID(@tableName) AND idx.is_primary_key=1
                                    )
                                    select
									colm.column_id ColumnID,
                                    CAST(CASE WHEN indexCTE.column_id IS NULL THEN 0 ELSE 1 END AS BIT) IsPrimaryKey,
                                    colm.name ColumnName,
                                    systype.name ColumnType,
                                    colm.is_identity IsIdentity,
                                    colm.is_nullable IsNullable,
                                    cast(colm.max_length as int) ByteLength,
                                    (
                                        case 
                                            when systype.name='nvarchar' and colm.max_length>0 then colm.max_length/2 
                                            when systype.name='nchar' and colm.max_length>0 then colm.max_length/2
                                            when systype.name='ntext' and colm.max_length>0 then colm.max_length/2 
                                            else colm.max_length
                                        end
                                    ) CharLength,
                                    cast(colm.precision as int) Precision,
                                    cast(colm.scale as int) Scale,
                                    prop.value Remark
                                    from {0}.sys.columns colm
                                    inner join {0}.sys.types systype on colm.system_type_id=systype.system_type_id and colm.user_type_id=systype.user_type_id
                                    left join {0}.sys.extended_properties prop on colm.object_id=prop.major_id and colm.column_id=prop.minor_id
                                    LEFT JOIN indexCTE ON colm.column_id=indexCTE.column_id AND colm.object_id=indexCTE.object_id                                        
                                    where colm.object_id=OBJECT_ID(@tableName)
                                    order by colm.column_id", database);
            #endregion
            SqlParameter param = new SqlParameter("@tableName", SqlDbType.NVarChar, 100) { Value = string.Format("{0}.{1}.{2}", database, schema, tableName) };
            DataTable dt = GetDataTable(connectionString, sql, param);
            return dt.Rows.Cast<DataRow>().Select(row => new DbColumn()
            {
                ColumnID = row.Field<int>("ColumnID"),
                IsPrimaryKey = row.Field<bool>("IsPrimaryKey"),
                ColumnName = row.Field<string>("ColumnName"),
                ColumnType = row.Field<string>("ColumnType"),
                IsIdentity = row.Field<bool>("IsIdentity"),
                IsNullable = row.Field<bool>("IsNullable"),
                ByteLength = row.Field<int>("ByteLength"),
                CharLength = row.Field<int>("CharLength"),
                Scale = row.Field<int>("Scale"),
                Remark = row["Remark"].ToString()
            }).ToList();
        }

        #endregion

        //执行SQL语句获取数据
        #region GetDataTable
        /// <summary>
        /// 执行SQL语句获取数据
        /// </summary>
        /// <param name="connectionString"></param>
        /// <param name="commandText"></param>
        /// <param name="parms"></param>
        /// <returns></returns>
        public static DataTable GetDataTable(string connectionString, string commandText, params SqlParameter[] parms)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand command = connection.CreateCommand();
                command.CommandText = commandText;
                command.Parameters.AddRange(parms);
                SqlDataAdapter adapter = new SqlDataAdapter(command);

                DataTable dt = new DataTable();
                adapter.Fill(dt);

                return dt;
            }
        }

        #endregion

        //获取主键
        #region GetPrimaryKey
        /// <summary>
        /// 获取主键
        /// </summary>
        /// <param name="dbColumns"></param>
        /// <returns></returns>
        public static string GetPrimaryKey(List<DbColumn> dbColumns)
        {
            string primaryKey = string.Empty;
            if (dbColumns != null && dbColumns.Count > 0)
            {
                foreach (var item in dbColumns)
                {
                    if (item.IsPrimaryKey == true)
                    {
                        primaryKey = item.ColumnName;
                    }
                }
            }
            return primaryKey;
        }
        #endregion
	}



	
    /// <summary>
    /// 数据类型映射：SqlServer 
    /// </summary>
    public class SqlServerDbTypeMap
    {
        /// <summary>
        /// 映射 C# 类型名称
        /// </summary>
        /// <param name="dbtype"></param>
        /// <returns></returns>
        public static string MapCSharpName(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return dbtype;
            dbtype = dbtype.ToLower();
            string csname = "object";
            switch (dbtype)
            {
                case "bigint": csname = "long"; break;
                case "binary": csname = "byte[]"; break;
                case "bit": csname = "bool"; break;
                case "char": csname = "string"; break;
                case "date": csname = "DateTime"; break;
                case "datetime": csname = "DateTime"; break;
                case "datetime2": csname = "DateTime"; break;
                case "datetimeoffset": csname = "DateTimeOffset"; break;
                case "decimal": csname = "decimal"; break;
                case "float": csname = "double"; break;
                case "image": csname = "byte[]"; break;
                case "int": csname = "int"; break;
                case "money": csname = "decimal"; break;
                case "nchar": csname = "string"; break;
                case "ntext": csname = "string"; break;
                case "numeric": csname = "decimal"; break;
                case "nvarchar": csname = "string"; break;
                case "real": csname = "Single"; break;
                case "smalldatetime": csname = "DateTime"; break;
                case "smallint": csname = "short"; break;
                case "smallmoney": csname = "decimal"; break;
                case "sql_variant": csname = "object"; break;
                case "sysname": csname = "object"; break;
                case "text": csname = "string"; break;
                case "time": csname = "TimeSpan"; break;
                case "timestamp": csname = "byte[]"; break;
                case "tinyint": csname = "byte"; break;
                case "uniqueidentifier": csname = "Guid"; break;
                case "varbinary": csname = "byte[]"; break;
                case "varchar": csname = "string"; break;
                case "xml": csname = "string"; break;
                default: csname = "object"; break;
            }
            return csname;
        }

        /// <summary>
        /// 映射 C# 类型
        /// </summary>
        /// <param name="dbtype"></param>
        /// <returns></returns>
        public static Type MapCSharpType(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return Type.Missing.GetType();
            dbtype = dbtype.ToLower();
            Type cstype = typeof(object);
            switch (dbtype)
            {
                case "bigint": cstype = typeof(long); break;
                case "binary": cstype = typeof(byte[]); break;
                case "bit": cstype = typeof(bool); break;
                case "char": cstype = typeof(string); break;
                case "date": cstype = typeof(DateTime); break;
                case "datetime": cstype = typeof(DateTime); break;
                case "datetime2": cstype = typeof(DateTime); break;
                case "datetimeoffset": cstype = typeof(DateTimeOffset); break;
                case "decimal": cstype = typeof(decimal); break;
                case "float": cstype = typeof(double); break;
                case "image": cstype = typeof(byte[]); break;
                case "int": cstype = typeof(int); break;
                case "money": cstype = typeof(decimal); break;
                case "nchar": cstype = typeof(string); break;
                case "ntext": cstype = typeof(string); break;
                case "numeric": cstype = typeof(decimal); break;
                case "nvarchar": cstype = typeof(string); break;
                case "real": cstype = typeof(Single); break;
                case "smalldatetime": cstype = typeof(DateTime); break;
                case "smallint": cstype = typeof(short); break;
                case "smallmoney": cstype = typeof(decimal); break;
                case "sql_variant": cstype = typeof(object); break;
                case "sysname": cstype = typeof(object); break;
                case "text": cstype = typeof(string); break;
                case "time": cstype = typeof(TimeSpan); break;
                case "timestamp": cstype = typeof(byte[]); break;
                case "tinyint": cstype = typeof(byte); break;
                case "uniqueidentifier": cstype = typeof(Guid); break;
                case "varbinary": cstype = typeof(byte[]); break;
                case "varchar": cstype = typeof(string); break;
                case "xml": cstype = typeof(string); break;
                default: cstype = typeof(object); break;
            }
            return cstype;
        }
    }
#>